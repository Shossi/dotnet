trigger:
- main

pool:
  name: 'default'

jobs:
- job: Build
  displayName: 'Build job'
  steps:
  - script: |
      BUILD_ID=$(Build.BuildId)
      BRANCH_NAME=$(Build.SourceBranchName)
      # Clean branch name by replacing slashes with hyphens
      BRANCH_NAME_CLEAN="${BRANCH_NAME//\//-}"
      # Ensure DYNAMIC_VERSION is a valid version string
      DYNAMIC_VERSION="1.0.${BUILD_ID}"
      PACKAGE_ID="${BRANCH_NAME_CLEAN}.yossi"
      echo "Branch: $BRANCH_NAME"
      echo "Clean Branch: $BRANCH_NAME_CLEAN"
      echo "Dynamic Version: $DYNAMIC_VERSION"
      echo "Package ID: $PACKAGE_ID"
      
      # Save variables to a file for later use
      echo "DYNAMIC_VERSION=$DYNAMIC_VERSION" > $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "PACKAGE_ID=$PACKAGE_ID" >> $(Build.ArtifactStagingDirectory)/build_vars.sh
    displayName: 'Set Branch and Version Variables'

  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "DYNAMIC_VERSION: $DYNAMIC_VERSION"
      echo "PACKAGE_ID: $PACKAGE_ID"
    displayName: 'Debug Version and Package ID'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "DYNAMIC_VERSION: $DYNAMIC_VERSION"
      echo "PACKAGE_ID: $PACKAGE_ID"
      dotnet build **/*.csproj --configuration Release /p:PackageVersion=$DYNAMIC_VERSION /p:PackageId=$PACKAGE_ID
    displayName: 'Build project'

  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "DYNAMIC_VERSION: $DYNAMIC_VERSION"
      echo "PACKAGE_ID: $PACKAGE_ID"
      dotnet pack **/*.csproj --configuration Release --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$DYNAMIC_VERSION /p:PackageId=$PACKAGE_ID
    displayName: 'Pack NuGet package'

  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "Publishing artifact: $(Build.SourceBranchName)_$DYNAMIC_VERSION"
    displayName: 'Print Artifact Name Before Publishing'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(Build.SourceBranchName)_$(DYNAMIC_VERSION)'
    displayName: 'Publish Artifacts'

  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "Artifact Version: $DYNAMIC_VERSION"
    displayName: 'Print Version Number'

- job: Test
  displayName: 'Test job'
  dependsOn: Build
  steps:
  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "DYNAMIC_VERSION: $DYNAMIC_VERSION"
      echo "PACKAGE_ID: $PACKAGE_ID"
      dotnet test **/*.csproj --configuration Release
    displayName: 'Run tests'

- job: Publish
  displayName: 'Publish job'
  dependsOn:
  - Build
  - Test
  steps:
  - script: |
      # Source the variables
      source $(Build.ArtifactStagingDirectory)/build_vars.sh
      echo "BRANCH_NAME: $BRANCH_NAME"
      echo "VERSION: $DYNAMIC_VERSION"
      echo "Downloading artifact: ${BRANCH_NAME}_${DYNAMIC_VERSION}"
    displayName: 'Print Artifact Name for Download'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '$(Build.SourceBranchName)_$(DYNAMIC_VERSION)'
      path: '$(Pipeline.Workspace)/drop'
    displayName: 'Download Artifact'

  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      feedsToUse: 'select'
      vstsFeed: 'fb34e676-860d-42fb-b174-75c46291e03f/954a6374-e3f9-4513-881c-4489225f54b4'
    displayName: 'Restore NuGet packages (Authenticate to feed)'

  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(Pipeline.Workspace)/drop/*.nupkg'
      publishVstsFeed: 'fb34e676-860d-42fb-b174-75c46291e03f/954a6374-e3f9-4513-881c-4489225f54b4'
    displayName: 'Push NuGet package'

  - task: UniversalPackages@0
    inputs:
      command: 'publish'
      publishDirectory: '$(Pipeline.Workspace)/drop'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: 'fb34e676-860d-42fb-b174-75c46291e03f/954a6374-e3f9-4513-881c-4489225f54b4'
      vstsFeedPackagePublish: 'random'
      versionOption: 'patch'
      patvar: 'PAT'
