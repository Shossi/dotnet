trigger:
- main

pool:
  name: 'default'

variables:
  PackageVersion: '1.0.$(Build.BuildId)'

jobs:
- job: Build
  displayName: 'Build job'
  steps:
  - script: |
      BRANCH_NAME=$(Build.SourceBranchName)
      echo "##vso[task.setvariable variable=BRANCH_NAME;isOutput=true]$BRANCH_NAME"
      echo "Branch: $BRANCH_NAME"
    name: SetVariables
    displayName: 'Set Branch Variable'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration Release /p:Version=$(PackageVersion)'
    displayName: 'Build project'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'pack'
      projects: '**/*.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory) /p:Version=$(PackageVersion)'
    displayName: 'Pack NuGet package'

  - script: |
      echo "Publishing artifact: $(Build.SourceBranchName)_$(PackageVersion)"
    displayName: 'Print Artifact Name Before Publishing'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(Build.SourceBranchName)_$(PackageVersion)'
    displayName: 'Publish Artifacts'

  - script: |
      echo "Artifact Version: $(PackageVersion)"
    displayName: 'Print Version Number'

- job: Test
  displayName: 'Test job'
  dependsOn: Build
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: '**/*.csproj'
      arguments: '--configuration Release'
    displayName: 'Run tests'

- job: Publish
  displayName: 'Publish job'
  dependsOn:
  - Build
  - Test
  variables:
    BRANCH_NAME: $[ dependencies.Build.outputs['SetVariables.BRANCH_NAME'] ]
  steps:
  - script: |
      echo "BRANCH_NAME: $BRANCH_NAME"
      echo "Downloading artifact: ${BRANCH_NAME}_$(PackageVersion)"
    displayName: 'Print Artifact Name for Download'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '$(BRANCH_NAME)_$(PackageVersion)'
      path: '$(Pipeline.Workspace)/drop'
    displayName: 'Download Artifact'

  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      feedsToUse: 'select'
      vstsFeed: 'fb34e676-860d-42fb-b174-75c46291e03f/954a6374-e3f9-4513-881c-4489225f54b4'
    displayName: 'Restore NuGet packages (Authenticate to feed)'

  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(Pipeline.Workspace)/drop/*.nupkg'
      publishVstsFeed: 'fb34e676-860d-42fb-b174-75c46291e03f/954a6374-e3f9-4513-881c-4489225f54b4'
    displayName: 'Push NuGet package'

  - task: UniversalPackages@0
    inputs:
      command: 'publish'
      publishDirectory: '$(Pipeline.Workspace)/drop'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: 'fb34e676-860d-42fb-b174-75c46291e03f/954a6374-e3f9-4513-881c-4489225f54b4'
      vstsFeedPackagePublish: 'random'
      versionOption: 'patch'
      patvar: 'PAT'
